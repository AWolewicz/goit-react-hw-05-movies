{"version":3,"file":"static/js/76.e314f655.chunk.js","mappings":"gNACA,GAAgB,MAAQ,oBAAoB,KAAO,mBAAmB,SAAW,uBAAuB,KAAO,mBAAmB,SAAW,uBAAuB,KAAO,oB,SCuD3K,EAnDa,SAAHA,GAA4B,IAAtBC,EAAcD,EAAdC,eACdC,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAA0BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEdG,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACRb,EAAe,sCAADc,OAC0BH,EAAO,4BAE5CI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,MAAM,EAAG,GAAG,IACnCH,MAAK,SAAAC,GAAI,OAAIV,EAAWU,EAAK,IAC7BG,OAAM,kBAAMT,GAAS,EAAK,GAC/B,GAAG,CAACV,EAAgBW,KAGlBS,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIZ,IAAUJ,KACViB,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAAA,MAAUH,SAAC,sDAI1BhB,EAAQoB,OAAS,GAChBH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,KAASH,SACrBhB,EAAQqB,KAAI,SAAAC,GAAM,OACjBP,EAAAA,EAAAA,MAAA,MAAIG,UAAWC,EAAAA,SAAaH,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAAA,KAASH,SAAEM,EAAOC,OAC/BD,EAAOE,cACNP,EAAAA,EAAAA,KAAA,OACEC,UAAWC,EAAAA,MACXM,IAAG,mCAAAhB,OAAqCa,EAAOE,cAC/CE,IAAKJ,EAAOC,QAGdN,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,aATcG,EAAOK,GAYpC,OAITV,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAAA,KAASH,SAAC,oCAIhC,C","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Cast_error__hQWWB\",\"list\":\"Cast_list__GlWio\",\"listItem\":\"Cast_listItem__UvJjd\",\"name\":\"Cast_name__6UbFm\",\"avatarBg\":\"Cast_avatarBg__QGBDg\",\"info\":\"Cast_info__UHntJ\"};","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport css from '../Cast/Cast.module.css';\n\nconst Cast = ({ handleFetching }) => {\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    handleFetching(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`\n    )\n      .then(data => data.cast.slice(0, 12))\n      .then(data => setResults(data))\n      .catch(() => setError(true));\n  }, [handleFetching, movieId]);\n\n  return (\n    <div>\n      {(error || !results) && (\n        <p className={css.error}>\n          Error: Failed to get information from the server.\n        </p>\n      )}\n      {results.length > 0 ? (\n        <ul className={css.list}>\n          {results.map(result => (\n            <li className={css.listItem} key={result.id}>\n              <p className={css.name}>{result.name}</p>\n              {result.profile_path ? (\n                <img\n                  className={css.image}\n                  src={`https://image.tmdb.org/t/p/w200/${result.profile_path}`}\n                  alt={result.name}\n                />\n              ) : (\n                <div className={css.avatarBg}>\n                </div>\n              )}\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className={css.info}>Cast information unavailable.</p>\n      )}\n    </div>\n  );\n};\n\nCast.propTypes = {\n  handleFetching: PropTypes.func.isRequired,\n};\n\nexport default Cast;"],"names":["_ref","handleFetching","_useState","useState","_useState2","_slicedToArray","results","setResults","_useState3","_useState4","error","setError","movieId","useParams","useEffect","concat","then","data","cast","slice","catch","_jsxs","children","_jsx","className","css","length","map","result","name","profile_path","src","alt","id"],"sourceRoot":""}